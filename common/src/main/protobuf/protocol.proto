syntax = "proto3";

package monix.mini.platform;

//Master slave service definition
service MasterProtocol {
  rpc join (JoinRequest) returns (JoinReply) {}
}

service SlaveProtocol {
  rpc operation (OperationEvent) returns (EventResult) {}
  rpc transaction (TransactionEvent) returns (EventResult) {}
  rpc fetch (FetchRequest) returns (FetchReply) {}
}

message OperationEvent {
  string client = 1;
  int64 amount = 2;
  string location = 3;
  OperationType operationType = 4;
}

enum OperationType {
  DEPOSIT = 0;
  WITHDRAW = 1;
}

message TransactionEvent {
  string sender = 1;
  string receiver = 2;
  int64 amount = 3;
}

message Recipient {
  string name = 1;
  RecipientType type = 2;
}

enum RecipientType {
  PERSON = 0;
  ENTITY = 1;
  ANONYMOUS = 2;
}

message FetchRequest {
  string client = 1;
}


message FetchReply {
  repeated TransactionEvent transactions = 1;
  repeated OperationEvent operations = 2;
}

message EventResult {
  ResultStatus status = 1;
}

enum ResultStatus {
  INSERTED = 0;
  DUPLICATED = 1;
  FAILED = 2;
}

//join
message JoinRequest {
 SlaveInfo slaveInfo = 1;
}

message SlaveInfo {
  string slave_id = 1;
  string host = 2;
  int32 port = 3;
}

message JoinReply {
  JoinResponse response = 1;
}

enum JoinResponse {
  JOINED = 0;
  REJECTED = 1;
}
