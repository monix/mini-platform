syntax = "proto3";

package monix.mini.platform;

//Master slave service definition
service DispatcherProtocol {
  rpc join (JoinRequest) returns (JoinReply) {}
}

service WorkerProtocol {
  //insert protocol
  rpc operation (OperationEvent) returns (EventResult) {}
  rpc transaction (TransactionEvent) returns (EventResult) {}

  //fetch protocol
  rpc fetchAll (FetchRequest) returns (FetchAllReply) {}
  rpc fetchTransactions (FetchRequest) returns (FetchTransactionsReply) {}
  rpc fetchOperations (FetchRequest) returns (FetchOperationsReply) {}
  rpc fetchInteractions (FetchRequest) returns (FetchInteractionsReply) {}
  rpc fetchBranches (FetchRequest) returns (FetchBranchesReply) {}
}

message OperationEvent {
  string client = 1;
  int64 amount = 2;
  string branch = 3;
  OperationType operationType = 4;
}

enum OperationType {
  DEPOSIT = 0;
  WITHDRAW = 1;
}

message TransactionEvent {
  string sender = 1;
  string receiver = 2;
  int64 p = 3;
}

message Recipient {
  string name = 1;
  RecipientType type = 2;
}

enum RecipientType {
  PERSON = 0;
  ENTITY = 1;
  ANONYMOUS = 2;
}

message FetchRequest {
  string client = 1;
}


message FetchAllReply {
  repeated TransactionEvent transactions = 1;
  repeated OperationEvent operations = 2;
  repeated string interactions = 3;
  repeated string branches = 4;
}

message FetchTransactionsReply {
  repeated TransactionEvent transactions = 1;
}

message FetchOperationsReply {
  repeated OperationEvent operations = 1;
}

message FetchInteractionsReply {
  repeated string interactions = 1;
}

message FetchBranchesReply {
  repeated string branches = 1;
}

message EventResult {
  ResultStatus status = 1;
}

enum FetchType {
  ALL = 0;
  TRANSACTION = 1;
  OPERATION = 2;
  INTERACTION = 3;
  BRANCH = 4;
}

enum ResultStatus {
  INSERTED = 0;
  DUPLICATED = 1;
  FRAUDULENT = 2;
  FAILED = 3;
}

//join
message JoinRequest {
 WorkerInfo workerInfo = 1;
}

message WorkerInfo {
  string worker_id = 1;
  string host = 2;
  int32 port = 3;
}

message JoinReply {
  JoinResponse response = 1;
}

enum JoinResponse {
  JOINED = 0;
  REJECTED = 1;
}
